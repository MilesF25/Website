

---
title: Week One Summary
author: Miles Franck
date: 9/5/23
---

# Professional PrÃ©cis
Miles Franck


Hi welcome to my website. I will be updating it from time to time with details of my work.

## Software Engineering Book

### Week 3

#### Summary

The book is about the concept of software engineering and its broader scope. The book talks about not just coding but also the tools and processes used to develop and maintain code over time. It raises questions about how programmers can maintain code and good coding practice to ensure that the code is able to last a long time. The key idea is that software engineering is "programming integrated over time



#### Reflection and Action Items

I feel as software engineers we need to be mindful of how we decide to code our program. We need to think about the long term, our program is going to be used and maintained by people years after us. We must ensure that what we decide to do doesn't make life hard for the people after us. For example we should find a way to get the program to run on every OS.


#### FB1

his chapter talks about the importance of testing in software development, The purpose of testing code is to find bugs, enhance your code and to make sure your code is reliable. Even though testing your code is important, it does not mean your code will work as intended.

#### Reflection and Action Items

Learning about how to make sure our program works will be very helpful. As of now I don't know many ways to make sure my code works. All I know is that 
if I get the expected output then it must be correct.



### Week 4


#### FB2

This chapter talks about code coverage. Code coverage is measuring which parts of a program are actually executed during a test run. This is important because test your code will guarantee that your code works and seeing what happens during a test run can help you understand your code more and allows to make improvements.The book also talked about black box and white box testing. Black box fuzzing, also known as "blind fuzzing," is a testing technique where the tester has no knowledge of the internal structure or source code of the target software. Testers treat the software as a "black box" and focus solely on the inputs and outputs. Another way is called white box testing. White box fuzzing, also known as "smart fuzzing" or "code-aware fuzzing," involves testing a program with an understanding of its internal structure, such as the source code, algorithms, or data structures.


####  Reflection and Action

The book gave some libaries to use for covering code. I think that this will be a big help when we want to go over our code. I think
that using these to help test our code is a good idea, but we should also try to make our own, even though that would be more work I think
it would be cool if we made our own libary just for Chasten.



#### SE2

In SE2 it talks how software engineering is porgramming overtime. It uses Hyrum's law as a good explination of what this means. Hyrum's law says that
as software is used by more people, they will come to rely on its existing behavior, even if that behavior was not initially intended or documented. This law talks about the importance of maintaining backward compatibility and consistency in software interfaces, as changes can inadvertently disrupt users.
It also talks about how software engineering unlike solitary programming, thrives on collaborative efforts. Success in software engineering hinges on anticipating and adapting to changes, both during development and post-release. Striking a balance between resource allocation, whether time or cost, and anticipated software benefits is vital. Software engineering projects are engineered for lasting impact, designed to endure for years.


### Week 5


#### FB3

Fuzzing book 3 talks about Fuzzing. Fuzzing is a technique used to test your code. It is doen by making a function that can randomly generate a
ton of inputs to test your code. The point of this is to see how much your program can handle before it breaks. An example of a fuzzing function is 
this.

```python
def fuzzer(max_length: int = 100, char_start: int = 32, char_range: int = 32) -> str:
    """A string of up to `max_length` characters
       in the range [`char_start`, `char_start` + `char_range`)"""
    string_length = random.randrange(0, max_length + 1)
    out = ""
    for i in range(0, string_length):
        out += chr(random.randrange(char_start, char_start + char_range))
    return out
```
This program will retrun a random string with characters chosen from the specified range, and the length of the string will vary from 0 to max_length.

#### Reflection and Action items
This chapter provides a good way to test our program. I think this is especially with chasten because we will be working with xpath expressions.
It will be important to see what our program can and can't handle

#### SE3

SE3 talks about the importace of working with people. The book emphasiszes that programming is not just about coding but it's also about working together.
The book gives some examples of famous people like Bill Gates or Linus. They didn't develop all of Linux or Microsoft on their own, they might have started
but they didn't do everything, they had a team to help them. This leads into the next topic "It's all about the team". In this part it talks about the three
pillars of social interaction humility, respect, and trust.

#### SE3 Refelction

After reading SE3, it's clear that we should all be mindful of how we communicate, especially when discussing someone else's code. If we come across as too critical, it can discourage the original coder from participating and make others hesitant to share their work for fear of harsh feedback. To create a more welcoming environment, we should aim for open and constructive discussions that encourage everyone to actively engage and improve together as a team.


### Week 6


### SE4

SE4 talked about  how crucial it is to foster a culture of knowledge sharing within organizations. The article highlights  the need for psychological safety, respect, and inclusivity as the foundation of this culture. It also talks about the damaging effects of toxic behavior and encourages active efforts to combat it. The article highlights Google's leadership principles as a prime example of promoting expertise and kindness simultaneously. It also stresses the significance of using incentives and recognition systems to motivate knowledge sharing.



### Reflection and Action items

We need to make sure we create a safe space so people feel comfterable enough to share. We don't want to make a space where people are scared to share their ideas.


### FB4 Mutation

Fuzzing book 4 is similar to fuzzing book 3. In FB4 it talks about another way to test your test suiets. To do this you give your code mutations, or "artifical faults". The point of this to see if the test suite can detect the incorrect inputs. An example of using mutations to test your code is this program.

```python
>>> for mutant in MuFunctionAnalyzer(gcd, log=True):
>>>     with mutant:
>>>         assert gcd(1, 0) == 1, "Minimal"
>>>         assert gcd(0, 1) == 1, "Mirror"
>>> mutant.pm.score()
->  gcd_1
<-  gcd_1
Detected gcd_1 <class 'UnboundLocalError'> local variable 'c' referenced before assignment

->  gcd_2
<-  gcd_2
Detected gcd_2 <class 'AssertionError'> Mirror

->  gcd_3
<-  gcd_3

->  gcd_4
<-  gcd_4

->  gcd_5
<-  gcd_5

->  gcd_6
<-  gcd_6

->  gcd_7
<-  gcd_7
Detected gcd_7 <class 'AssertionError'> Minimal


0.42857142857142855
```

```python

>>> class TestGCD(unittest.TestCase):
>>>     def test_simple(self):
>>>         assert cfg.gcd(1, 0) == 1
>>> 
>>>     def test_mirror(self):
>>>         assert cfg.gcd(0, 1) == 1
>>> for mutant in MuProgramAnalyzer('gcd', gcd_src):
>>>     mutant[test_module].runTest('TestGCD')
>>> mutant.pm.score()
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
======================================================================
FAIL: test_simple (__main__.TestGCD)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/folders/n2/xd9445p97rb3xh7m1dfx8_4h0006ts/T/ipykernel_78662/2565918356.py", line 3, in test_simple
    assert cfg.gcd(1, 0) == 1
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)

1.0
```

Theses two progrmas can be used to test your test cases with mutation.
The first program takes your function and two if it's test cases. Then it does the mutation analysis on it. The second program is used to evaluate the mutation score, that means it checks to see the number of failures with the code.


### Reflection and Action items

Testing your code is very important but only testing it one way is bad practice, making sure you account for every possiblity is important. After reading FB4 I think we should talk as a team and discuss all the posibilites that can happen when someone is using our program.

## Week 7


## FB5

MutationFuzzer class that takes a list of seed inputs which are then mutated.
FB5 is about mutation fuzzing. To make it simple, mutation fuzzing is similar to normal fuzzing, you're inserting a random character, deleting a character, or flipping a bit in a character representation but this time instead of just using random inputs with very little chance of being correct, you make some changes to the inputs so it can be valid. An example of this is 

```python
def delete_random_character(s: str) -> str:
    """Returns s with a random character deleted"""
    if s == "":
        return s

    pos = random.randint(0, len(s) - 1)
    # print("Deleting", repr(s[pos]), "at", pos)
    return s[:pos] + s[pos + 1:]

    seed_input = "A quick brown fox"
    for i in range(10):
        x = delete_random_character(seed_input)
        print(repr(x))
```
The output of this code is
'A uick brown fox'
'A quic brown fox'
'A quick brown fo'
'A quic brown fox'
'A quick bown fox'
'A quick bown fox'
'A quick brown fx'
'A quick brown ox'
'A quick brow fox'
'A quic brown fox'

As you can see the results are close but they are not correct.

### Reflection and Action items

Testing inputs that are can be considerd valid but not correct is important becuase we can make test cases for inputs that will likely never happen, but testing for inputs that can produce a output but produce the wrong output is very important. We should use the examples in this chapter to help us make test cases.

## SE5

### Summary

The text talks about the contrast between programming and software engineering, emphasizing the responsibilities of engineers in designing products for a diverse user base. It uses Google's own failures as an example in representing underrepresented groups and points out the importance of diversity in technology companies. SE5 discusses various examples where technology failed to account for diverse users, highlighting the unintended consequences of biased data and decision-making. The text calls for the industry to prioritize equity, challenge established processes, and engage users from diverse backgrounds to build more inclusive products.


### Reflection and Action Items

SE5 serves as a reminder that, as technology becomes increasingly central to our lives, the impact of software engineering extends to all corners of society. Recognizing and addressing bias is the cornerstone of equitable engineering. Reflecting on the text, it's clear that we must be mindful of our actions when designing programs.


## Week 8

## FB6

FB6 is about fuzzing with grammars. To summarize FB6 grammars are extra hints you can give to your fuzzing samples. By giving your inputs more correct information you will have a higher chance of generating usalbe inputs to your program.

This is an example of grammars

```python
>>> US_PHONE_GRAMMAR: Grammar = {
>>>     "<start>": ["<phone-number>"],
>>>     "<phone-number>": ["(<area>)<exchange>-<line>"],
>>>     "<area>": ["<lead-digit><digit><digit>"],
>>>     "<exchange>": ["<lead-digit><digit><digit>"],
>>>     "<line>": ["<digit><digit><digit><digit>"],
>>>     "<lead-digit>": ["2", "3", "4", "5", "6", "7", "8", "9"],
>>>     "<digit>": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
>>> }
>>> 
>>> assert is_valid_grammar(US_PHONE_GRAMMAR)
```
Here you can see that we have give the program so valid inputs to use when fuzzing. Now that we can get it to generate valid inputs it can be more helpful with testing our program. 

## Reflection and Action Items

Using grammars like the US_PHONE_GRAMMAR example in our program can help us thoroughly test our software with various valid inputs. This approach ensures that our software handles expected inputs correctly and guards against unexpected variations in input formats.




## SE6

### Summary


SE6 emphasizes the importance of effective leadership and management, offering valuable insights for leaders. It highlights the significance of setting clear goals, honest communication, and tracking team happiness. It also talks about strategies for motivating and providing direction to team members, it makes a connection between team members and plants, where each has unique needs. The conclusion underscores the role of humility, trust, and respect as essential pillars of good leadership.




### Action Items and Reflection

Effective leadership means leading, not just managing. Delegate, communicate clearly, and provide honest feedback. Ensure fair work distribution, promote skill development, and consider work-life balance. Use intrinsic motivation principles: give autonomy, skill opportunities, and a sense of purpose. Tailor your approach to individual team members, like caring for different plants. Prioritize honesty and trust-building. Leadership requires technical and social skills, including humility and respect.


## Week 9


### FB7

An efficent fuzzing grammar is a more efficent way to fuzz compared to normal fuzzing. Normal fuzzing is just generating a bunch of possibly correct
inputs and seeing if it works or not. A efficient grammar fuzzur makes use of derivation trees. Derivation trees is an interesting solution for the problem with regular fuzzing. By using a derivation tree, it allows us to not only generate inputs systematically but also gain more control over the testing process. We can always keep track of our expansion status, understand which elements have been expanded into which others, and identify which symbols still need to be expanded. Also the use of derivation trees offers the benefit of memory and time efficiency. Rather than repeatedly generating new inputs, we add new elements to the tree, which is a more efficient approach. This controlled and efficient method of input generation leads to more effective testing and a higher likelihood of discovering vulnerabilities and bugs in software.

### Reflection and Action Items

I think that it goes without saying having a more efficient way to fuzz our code is a good thing. It is a good idea to have a way to give our program
decent inputs to test instead of throwing random inputs at it. That being said I don't think chasten needs this kind of testing. I feel like our program
isn't so complex that it needs something like this to test it. I think that this could be an interesting conversation to have with the team.

### 


## SE7

SE7 talks about effective leadership strategies focusing on time and energy management for leaders facing overwhelming responsibilities. It emphasizes three core principles, Always Be Deciding, where leaders navigate ambiguous problems by making informed trade-offs; Always Be Leaving, encouraging the development of self-sufficient teams that can handle challenges independently; and Always Be Scaling, advising proactive management of increasing responsibilities to protect personal resources. The talks about the importance of deliberately dropping lower-priority tasks, allowing leaders to focus on critical responsibilities. It also highlights the significance of protecting workers energy through strategic disconnection, breaks, and rejuvenating vacations.



## Reflection and action items
After reading this, I believe it's we should concentrate on the essential aspects of the chasten. With the semester coming to a close, it might be necessary to make a trade-off, sacrificing some quality-of-life features in favor of prioritizing the most critical tasks. This shift in focus will ensure we give our full attention to what matters

### Week 10

## FB8
FB8 talks about how to parse inputs so you can achieve even better inputs. The book showd how effective parsing the inputs can be. In the book it refrenced a CSV file with information on cars and a function that can retrive the data from the CSV, then it gave the function data using a grammar fuzzer, this was the result

```
'9w9J\'/,LU<"l,|,Y,Zv)Amvx,c\n'	 Invalid entry
'(n8].H7,qolS'	 not enough values to unpack (expected at least 4, got 2)
'\nQoLWQ,jSa'	 not enough values to unpack (expected at least 4, got 2)
'K1,\n,RE,fq,%,,sT+aAb'	 Invalid entry
"m,d,,8j4'),-yQ,B7"	 Invalid entry
'g4,s1\t[}{.,M,<,\nzd,.am'	 Invalid entry
',Z[,z,c,#x1,gc.F'	 Invalid entry
'pWs,rT`,R'	 not enough values to unpack (expected at least 4, got 3)
'iN,br%,Q,R'	 Invalid entry
'ol,\nH<\tn,^#,=A'	 Invalid entry
```
Even though the grammar has hints on what the proper inputs are it still could not generate proper inputs. With input parsing we would be able to generate even more accurate inputs.

## SE8


## Reflection

The text talks about the importance of rules and guidance in software development at a large company like Google. Rules are vital for maintaining a scalable codebase, while guidance offers distilled best practices from experience. It emphasizes the need for educational resources to help engineers understand how programming languages are used within Google's codebase. Automated tools, such as error checkers and code formatters, are encouraged to enforce rules and ensure consistency. The implementation of tools like gofmt for Go streamlined formatting and readability. Essentially, rules, coupled with guidance, educational support, and automated enforcement, form the key components for managing complexity and sustaining a healthy codebase in a large engineering organization.

## Reflection and Action items

After reading this I thought back to the first few weeks of this class, to me if felt as if there was no guidance and we had to figure everything out on our own, but as the weeks went by we started to find our footing. What I found really interesting is the  use of tools like error checkers and formatters to ensure consistent rule adherence. How could we implent that into our work.



### Week 11
## FB9
FB9 is about reducing and simplifying failure inducing inputs. The stratgey the book uses is called delta debugging. Delta debugging a technique used in software testing and debugging to isolate the cause of a failure by systematically narrowing down the input that triggers the failure. The idea is to iteratively reduce the input (delta) that leads to the failure until the minimal input causing the failure is identified.

Here is an example 
```python
class DeltaDebuggingReducer(CachingReducer):
    """Reduce inputs using delta debugging."""

    def reduce(self, inp: str) -> str:
        """Reduce input `inp` using delta debugging. Return reduced input."""

        self.reset()
        assert self.test(inp) != Runner.PASS

        n = 2     # Initial granularity
        while len(inp) >= 2:
            start = 0.0
            subset_length = len(inp) / n
            some_complement_is_failing = False

            while start < len(inp):
                complement = inp[:int(start)] + \
                    inp[int(start + subset_length):]

                if self.test(complement) == Runner.FAIL:
                    inp = complement
                    n = max(n - 1, 2)
                    some_complement_is_failing = True
                    break

                start += subset_length

            if not some_complement_is_failing:
                if n == len(inp):
                    break
                n = min(n * 2, len(inp))

        return inp
```

## Reflection and Action Items
Having more ways to reduce input erros is always a good thing. Even though we are close to the end of the semester I still think it would be a good idea to consider implementing this into our project.

## SE9

## Summary
The article talks about the importance of code review at Google, emphasizing its role in maintaining code quality and consistency. It stresses the need for readable and simple code for easier understa,nding and long-term maintenance. Some benefits of code review,  is that it promotes a collaborative mindset professionalism , and constructive feedback. Knowledge sharing is also a  key aspect, and best practices like keeping changes small are recommended. The article categorizes different types of code reviews and underscores the overall importance of code review in ensuring developer satisfaction and efficient development.

## Reflection and action items

The article talks about the vital role of code review at Google. It highlights the need for professionalism, knowledge sharing, and the psychological benefits of constructive feedback. The action items suggest focusing on respectful communication, using reviews for learning, and embracing automation for efficiency. Keeping code changes small is recommended for a smoother process. We should try to consider these things when reviewing code.

### DB1 and SE10

## DB1
In debugging book 1 it talks about the basics of debugging. It gives some tips to help you debug code. Some examples are using the assert function, removing parts of your code to see if it works, and even using the scientific method to break down the problem. To my surprise the book says it's not a good idea to use print statements to try and debug you code, I disagree, even though it takes time it's still helpful


## Reflection and Action items
I already do most of the things that were talked about in the book but it was still nice to be reminded. It's always good to practice your debugging skills, maybe as a class we can come up with more tricks to help us debug code.


## SE10

SE10 is about documentation.The first part of the document underscores the common frustration among engineers regarding the lack of quality documentation in software development. It highlights the need for engineers to take responsibility for writing documentation and introduces the idea of treating documentation like code. The importance of documentation in code comprehension, team focus, and onboarding is discussed. The challenges associated with documentation, such as delayed benefits and perceived difficulty, are explored. The section emphasizes the long-term benefits of documentation.

## Reflection and Action Items

As a class I think we should have some sort of universal way of documenting our code. We can make up some kind of guidelines so documenting code is easier. We have to keep in mind that we are working on two projects and people are doing different things, having good documentation will ensure that people will have a easy time understanding your code.


### Week 14

## DB2
DB2 is about observeing a program during an execution. The book uses pythons ```python sys.settrace(traceit)``` to help. The traceit function looks like this

```python

def traceit(frame: FrameType, event: str, arg: Any) -> Optional[Callable]:
    print(event, frame.f_lineno, frame.f_code.co_name, frame.f_locals)
    return traceit
  ```

In this context, the "event" is a string indicating program occurrences, such as 'line' for the execution of a new line, 'call' for the initiation of a function call, and 'return' for the function's return. The "frame" parameter contains the present execution frame, encompassing the function and its local variables, including frame.f_lineno denoting the current line, frame.f_locals representing the current variables in a Python dictionary, and frame.f_code containing the current code as a Code object with attributes like frame.f_code.co_name indicating the current function's name. By printing out these values, we can easily obtain a trace of the program.


## Reflection and Action Items
This will be really helpful when we are debugging our code. By using tracing we will gain a better view of how code is executed. This will help us develop a stronger understanding of how our code works.